@page "/logdetail/{RelativePath?}"
@using CelHost.Apis.ApiServices
@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JS
@inject LogApiServices FileService;
@if (!string.IsNullOrEmpty(CurrentPage))
{
    <Breadcrumb>
        <BreadcrumbItem><a href="/logdetail">根目录</a></BreadcrumbItem>
        @foreach (var part in CurrentPage.Split('/', StringSplitOptions.RemoveEmptyEntries))
        {
            var path = string.Join("/", CurrentPage.Split('/').TakeWhile(p => p != part).Append(part));
            <BreadcrumbItem><a href="/logdetail/@(Uri.EscapeDataString(path))">@part</a></BreadcrumbItem>
        }
    </Breadcrumb>
    <Button Color="Color.Secondary" OnClick="GoToParentDirectory" class="mb-3">返回上级目录</Button>
}

<Table TItem="FileInfoDto" 
       IsPagination="true" 
       IsStriped="true" 
       IsBordered="true" 
       OnQueryAsync="OnQueryAsync" 
       ShowToolbar="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" Text="文件名" Sortable="true">
            <Template Context="item">
                @if (item.IsDirectory)
                {
                    <a href="javascript:void(0)" @onclick="() => NavigateToSubDirectory(item.RelativePath)">@item.Name</a>
                }
                else
                {
                    @item.Name
                }
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.IsDirectory" Text="类型" Sortable="true" FormatString="{(context.IsDirectory ? '文件夹' : '文件')}" />
        <TableColumn @bind-Field="@context.Size" Text="大小" Sortable="true">
            <Template Context="item">
                @FileSizeFormatter.FormatSize(item.Size)
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.LastModified" Text="最后修改时间" Sortable="true" />
        <TableColumn Text="操作">
            <Template Context="item">
                @if (!item.IsDirectory)
                {
                    <Button Color="Color.Primary" OnClick="() => DownloadFile(item.RelativePath, item.Name)">下载</Button>
                }
            </Template>
        </TableColumn>
    </TableColumns>
    <EmptyTemplate>
        <div class="text-center">无数据</div>
    </EmptyTemplate>
</Table>

@code {
    [Parameter]
    public string relativePath { get; set; }
    [Inject]
    [NotNull]
    public MessageService message { get; set; }
    public string CurrentPage
    {
        get
        {
            return string.IsNullOrEmpty(relativePath) ? "" : relativePath;
        }
    }
    public class FileInfoDto
    {
        public string Name { get; set; }
        public string RelativePath { get; set; }
        public bool IsDirectory { get; set; }
        public long Size { get; set; }
        public string LastModified { get; set; }
    }
    private async Task<QueryData<FileInfoDto>> OnQueryAsync(QueryPageOptions options)
    {
        var page = options.PageIndex;
        var pageSize = options.PageItems;

        var items = await FileService.GetFileListAsync(relativePath, page, pageSize);

        return new QueryData<FileInfoDto>
            {
                Items = items.Select(item => new FileInfoDto
                {
                    Name = item.Name,
                    RelativePath = item.RelativePath,
                    IsDirectory = item.IsDirectory,
                    Size = item.Size,
                    LastModified = item.LastModified
                }).ToList(),
                TotalCount = items.Count, // 假设后端返回的是分页数据，实际需从接口获取总数
                IsSorted = options.SortOrder != SortOrder.Unset,
                IsFiltered = options.Filters.Any()
            };
    }

    private async Task DownloadFile(string relativePath, string fileName)
    {
        try
        {
            var bytes = await FileService.DownloadFileAsync(relativePath);
            await JS.InvokeVoidAsync("downloadFileFromBytes", new object[] { fileName, bytes });
        }
        catch (Exception ex)
        {
            await message.Show(new MessageOption()
                {
                    Content = "下载失败",
                    Color = Color.Warning,
                    Icon = "fa - light fa - xmark",
                });
        }
    }
}