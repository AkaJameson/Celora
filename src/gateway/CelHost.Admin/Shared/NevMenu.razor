@using System.Diagnostics.CodeAnalysis
@inject IJSRuntime JS

<div class="nav-menu @(IsCollapsed ? "collapsed" : "")">
    <div class="nav-title">
        <h3>GANWEIYUN</h3>
    </div>
    <ul class="nav-list">
        @foreach (var item in MenuItems)
        {
            <li class="nav-item">
                <div class="nav-item-header" @onclick="() => ToggleSubMenu(item)">
                    <i class="@item.Icon"></i>
                    <span class="nav-item-text">@item.Name</span>
                    <span class="nav-toggle">@(item.IsExpanded ? "▼" : "▶")</span>
                </div>
                @if (item.IsExpanded && item.SubItems != null)
                {
                    <ul class="nav-sub-list">
                        @foreach (var subItem in item.SubItems)
                        {
                            <li class="nav-sub-item">
                                <a href="@subItem.Url">@subItem.Name</a>
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
    <div class="nav-collapse" @onclick="ToggleCollapse">
        <i class="fas fa-bars"></i>
        <span class="nav-collapse-text">@(IsCollapsed ? "展开" : "收起")</span>
    </div>
</div>

@code {
    public class MenuItem
    {
        private string url;
        public string Url { get { return url; } set { url = value.StartsWith("/") ? value : ($"/{value}"); } }
        public string Name { get; set; }
        public string Icon { get; set; } // 使用 FontAwesome 图标类名，如 "fas fa-home"
        public bool IsExpanded { get; set; } = false;
        public List<MenuItem> SubItems { get; set; }
    }

    [Parameter]
    public List<MenuItem> MenuItems { get; set; }

    [Parameter]
    public bool IsCollapsed { get; set; } = false;

    [Parameter]
    public EventCallback<bool> OnCollapseChanged { get; set; }

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
        if (OnCollapseChanged.HasDelegate)
        {
            await OnCollapseChanged.InvokeAsync(IsCollapsed);
        }
    }

    private void ToggleSubMenu(MenuItem item)
    {
        item.IsExpanded = !item.IsExpanded;
        StateHasChanged();
    }
}

<style>
    .nav-menu {
        width: 250px;
        min-width: 150px;
        background-color: #f0f0f0;
        height: 100%;
        padding: 10px;
        box-sizing: border-box;
        transition: width 0.3s;
    }

        .nav-menu.collapsed {
            width: 60px;
        }

            .nav-menu.collapsed .nav-item-text,
            .nav-menu.collapsed .nav-collapse-text,
            .nav-menu.collapsed .nav-sub-list,
            .nav-menu.collapsed .nav-toggle {
                display: none;
            }

    .nav-title {
        text-align: center;
        padding: 10px 0;
        font-size: 18px;
        color: #333;
    }

    .nav-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .nav-item {
        margin-bottom: 5px;
    }

    .nav-item-header {
        display: flex;
        align-items: center;
        padding: 8px 10px;
        color: #333;
        cursor: pointer;
    }

        .nav-item-header:hover {
            background-color: #ddd;
        }

        .nav-item-header i {
            margin-right: 8px;
        }

    .nav-toggle {
        margin-left: auto;
    }

    .nav-sub-list {
        list-style: none;
        padding-left: 20px;
        margin: 0;
    }

    .nav-sub-item a {
        display: block;
        padding: 5px 10px;
        color: #555;
        text-decoration: none;
    }

        .nav-sub-item a:hover {
            background-color: #ccc;
        }

    .nav-collapse {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        cursor: pointer;
        color: #333;
    }

        .nav-collapse i {
            margin-right: 8px;
        }

        .nav-collapse:hover {
            background-color: #ddd;
        }
</style>