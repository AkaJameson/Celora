@page "/login"
@using CelHost.Fronter.Apis
@using CelHost.Fronter.Components
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
<div style="height: 100vh; width: 100vw; padding: 0; margin:0;background-image:url('/images/login_bg.png'); background-size: cover;display: flex; justify-content: center; align-items: center">
    <MudContainer class="d-flex justify-center">
        <MudCard Elevation="4" Style="width: 400px; padding: 16px;  ">
            <MudCardHeader style="justify-content:center">
                <MudText Typo="Typo.h5" >登录</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudForm @ref="form" @bind-IsValid="@isValid">
                    <MudTextField T="string" Label="用户名" @bind-Value="model.Account" Required="true"
                                  Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" RequiredError="请输入用户名" />
                    <MudTextField T="string" Label="密码" @bind-Value="model.Password" Required="true"
                                  InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-4" RequiredError="请输入密码" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!isValid"
                               Size="Size.Large" FullWidth="true" OnClick="HandleLogin">
                        登录
                    </MudButton>
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudText Align="Align.Center" Class="mb-4">
                    <MudLink @onclick="OpenAuthDialog">授权</MudLink>
                </MudText>
            </MudCardActions>
        </MudCard>
    </MudContainer>

</div>

@code {
    private MudForm form;
    private bool isValid;
    private LoginModel model = new();
    [Inject]
    private UserApiServices UserApiServices { get; set; }

    private class LoginModel
    {
        public string Account { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        var result = await UserApiServices.Login(model.Account, model.Password);
        if (result == null || result.Code != 200)
        {
            Snackbar.Add(result?.Message ?? "登录失败", Severity.Error);
            return;
        }
        Snackbar.Add("登录成功", Severity.Success);
        NavigationManager.NavigateTo("/dashboard");
    }
    private async Task OpenAuthDialog()
    {
        var dialog = await DialogService.ShowAsync<AuthDialog>("授权文件上传");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("文件上传成功", Severity.Success);
        }
    }
}